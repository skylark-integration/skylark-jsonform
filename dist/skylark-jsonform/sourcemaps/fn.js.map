{"version":3,"sources":["fn.js"],"names":["define","langx","$","formTree","getFormValue","fn","jsonFormErrors","errors","options","this","removeClass","hide","errorSelectors","i","length","key","uri","replace","errormarkerclass","util","escapeSelector","push","errorType","type","addClass","html","message","show","join","firstError","get","scrollIntoView","behavior","jsonForm","defaults","submitEvent","activate","enableFields","optionSelected","tabClicked","form","initialize","render","transloadit","append","escapeHTML","JSON","stringify","params","data","unbind","bind","evt","submit","element","container","find","$target","targetIndex","removeAttr","parent","children","attr","e","$option","$select","targetIdx","getAttribute","preventDefault","hasClass","parents","eq","$content","first","index","each","delegate","val","click","on","toggleClass","slideToggle","jsonFormValue"],"mappings":"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","file":"../fn.js","sourcesContent":["define([\r\n  \"skylark-langx\",\r\n  \"skylark-jquery\",\r\n  \"./form-tree\",\r\n  \"./get-form-value\"\r\n],function(langx,$,formTree,getFormValue) {\r\n\r\n\r\n  /**\r\n   * Initializes tabular sections in forms. Such sections are generated by the\r\n   * 'selectfieldset' type of elements in JSON Form.\r\n   *\r\n   * Input fields that are not visible are automatically disabled\r\n   * not to appear in the submitted form. That's on purpose, as tabs\r\n   * are meant to convey an alternative (and not a sequence of steps).\r\n   *\r\n   * The tabs menu is not rendered as tabs but rather as a select field because\r\n   * it's easier to grasp that it's an alternative.\r\n   *\r\n   * Code based on bootstrap-tabs.js, updated to:\r\n   * - react to option selection instead of tab click\r\n   * - disable input fields in non visible tabs\r\n   * - disable the possibility to have dropdown menus (no meaning here)\r\n   * - act as a regular function instead of as a jQuery plug-in.\r\n   *\r\n   * @function\r\n   * @param {Object} tabs jQuery object that contains the tabular sections\r\n   *  to initialize. The object may reference more than one element.\r\n   */\r\n  var initializeTabs = function (tabs) {\r\n    var activate = function (element, container) {\r\n      container\r\n        .find('> .active')\r\n        .removeClass('active');\r\n      element.addClass('active');\r\n    };\r\n\r\n    var enableFields = function ($target, targetIndex) {\r\n      // Enable all fields in the targeted tab\r\n      $target.find('input, textarea, select').removeAttr('disabled');\r\n\r\n      // Disable all fields in other tabs\r\n      $target.parent()\r\n        .children(':not([data-idx=' + targetIndex + '])')\r\n        .find('input, textarea, select')\r\n        .attr('disabled', 'disabled');\r\n    };\r\n\r\n    var optionSelected = function (e) {\r\n      var $option = $(\"option:selected\", $(this)),\r\n        $select = $(this),\r\n        // do not use .attr() as it sometimes unexplicably fails\r\n        targetIdx = $option.get(0).getAttribute('data-idx') || $option.attr('value'),\r\n        $target;\r\n\r\n      e.preventDefault();\r\n      if ($option.hasClass('active')) {\r\n        return;\r\n      }\r\n\r\n      $target = $(this).parents('.tabbable').eq(0).find('> .tab-content > [data-idx=' + targetIdx + ']');\r\n\r\n      activate($option, $select);\r\n      activate($target, $target.parent());\r\n      enableFields($target, targetIdx);\r\n    };\r\n\r\n    var tabClicked = function (e) {\r\n      var $a = $('a', $(this));\r\n      var $content = $(this).parents('.tabbable').first()\r\n        .find('.tab-content').first();\r\n      var targetIdx = $(this).index();\r\n      // The `>` here is to prevent activating selectfieldsets inside a tabarray\r\n      var $target = $content.find('> [data-idx=' + targetIdx + ']');\r\n\r\n      e.preventDefault();\r\n      activate($(this), $(this).parent());\r\n      activate($target, $target.parent());\r\n      if ($(this).parent().hasClass('jsonform-alternative')) {\r\n        enableFields($target, targetIdx);\r\n      }\r\n    };\r\n\r\n    tabs.each(function () {\r\n      $(this).delegate('select.nav', 'change', optionSelected);\r\n      $(this).find('select.nav').each(function () {\r\n        $(this).val($(this).find('.active').attr('value'));\r\n        // do not use .attr() as it sometimes unexplicably fails\r\n        var targetIdx = $(this).find('option:selected').get(0).getAttribute('data-idx') ||\r\n          $(this).find('option:selected').attr('value');\r\n        var $target = $(this).parents('.tabbable').eq(0).find('> .tab-content > [data-idx=' + targetIdx + ']');\r\n        enableFields($target, targetIdx);\r\n      });\r\n\r\n      $(this).delegate('ul.nav li', 'click', tabClicked);\r\n      $(this).find('ul.nav li.active').click();\r\n    });\r\n  };\r\n\r\n  //3670-3809\r\n\r\n  /**\r\n   * Highlights errors reported by the JSON schema validator in the document.\r\n   *\r\n   * @function\r\n   * @param {Object} errors List of errors reported by the JSON schema validator\r\n   * @param {Object} options The JSON Form object that describes the form\r\n   *  (unused for the time being, could be useful to store example values or\r\n   *   specific error messages)\r\n   */\r\n  $.fn.jsonFormErrors = function(errors, options) {\r\n    $(\".error\", this).removeClass(\"error\");\r\n    $(\".warning\", this).removeClass(\"warning\");\r\n\r\n    $(\".jsonform-errortext\", this).hide();\r\n    if (!errors) return;\r\n\r\n    var errorSelectors = [];\r\n    for (var i = 0; i < errors.length; i++) {\r\n      // Compute the address of the input field in the form from the URI\r\n      // returned by the JSON schema validator.\r\n      // These URIs typically look like:\r\n      //  urn:uuid:cccc265e-ffdd-4e40-8c97-977f7a512853#/pictures/1/thumbnail\r\n      // What we need from that is the path in the value object:\r\n      //  pictures[1].thumbnail\r\n      // ... and the jQuery-friendly class selector of the input field:\r\n      //  .jsonform-error-pictures\\[1\\]---thumbnail\r\n      var key = errors[i].uri\r\n        .replace(/.*#\\//, '')\r\n        .replace(/\\//g, '.')\r\n        .replace(/\\.([0-9]+)(?=\\.|$)/g, '[$1]');\r\n      var errormarkerclass = \".jsonform-error-\" +\r\n        util.escapeSelector(key.replace(/\\./g,\"---\"));\r\n      errorSelectors.push(errormarkerclass);\r\n\r\n      var errorType = errors[i].type || \"error\";\r\n      $(errormarkerclass, this).addClass(errorType);\r\n      $(errormarkerclass + \" .jsonform-errortext\", this).html(errors[i].message).show();\r\n    }\r\n\r\n    // Look for the first error in the DOM and ensure the element\r\n    // is visible so that the user understands that something went wrong\r\n    errorSelectors = errorSelectors.join(',');\r\n    var firstError = $(errorSelectors).get(0);\r\n    if (firstError && firstError.scrollIntoView) {\r\n      firstError.scrollIntoView(true, {\r\n        behavior: 'smooth'\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Generates the HTML form from the given JSON Form object and renders the form.\r\n   *\r\n   * Main entry point of the library. Defined as a jQuery function that typically\r\n   * needs to be applied to a <form> element in the document.\r\n   *\r\n   * The function handles the following properties for the JSON Form object it\r\n   * receives as parameter:\r\n   * - schema (required): The JSON Schema that describes the form to render\r\n   * - form: The options form layout description, overrides default layout\r\n   * - prefix: String to use to prefix computed IDs. Default is an empty string.\r\n   *  Use this option if JSON Form is used multiple times in an application with\r\n   *  schemas that have overlapping parameter names to avoid running into multiple\r\n   *  IDs issues. Default value is \"jsonform-[counter]\".\r\n   * - transloadit: Transloadit parameters when transloadit is used\r\n   * - validate: Validates form against schema upon submission. Uses the value\r\n   * of the \"validate\" property as validator if it is an object.\r\n   * - displayErrors: Function to call with errors upon form submission.\r\n   *  Default is to render the errors next to the input fields.\r\n   * - submitEvent: Name of the form submission event to bind to.\r\n   *  Default is \"submit\". Set this option to false to avoid event binding.\r\n   * - onSubmit: Callback function to call when form is submitted\r\n   * - onSubmitValid: Callback function to call when form is submitted without\r\n   *  errors.\r\n   *\r\n   * @function\r\n   * @param {Object} options The JSON Form object to use as basis for the form\r\n   */\r\n  $.fn.jsonForm = function(options) {\r\n    var formElt = this;\r\n\r\n    options = langx.defaults({}, options, {submitEvent: 'submit'});\r\n\r\n    var form = new formTree();\r\n    form.initialize(options);\r\n    form.render(formElt.get(0));\r\n\r\n    // TODO: move that to formTree.render\r\n    if (options.transloadit) {\r\n      formElt.append('<input type=\"hidden\" name=\"params\" value=\\'' +\r\n        langx.escapeHTML(JSON.stringify(options.transloadit.params)) +\r\n        '\\'>');\r\n    }\r\n\r\n    // Keep a direct pointer to the JSON schema for form submission purpose\r\n    formElt.data(\"jsonform-tree\", form);\r\n\r\n    if (options.submitEvent) {\r\n      formElt.unbind((options.submitEvent)+'.jsonform');\r\n      formElt.bind((options.submitEvent)+'.jsonform', function(evt) {\r\n        form.submit(evt);\r\n      });\r\n    }\r\n\r\n    // Initialize tabs sections, if any\r\n    initializeTabs(formElt);\r\n\r\n    // Initialize expandable sections, if any\r\n    $('.expandable > div, .expandable > fieldset', formElt).hide();\r\n    formElt.on('click', '.expandable > legend', function () {\r\n      var parent = $(this).parent();\r\n      parent.toggleClass('expanded');\r\n      parent.find('legend').attr(\"aria-expanded\", parent.hasClass(\"expanded\"))\r\n      $('> div', parent).slideToggle(100);\r\n    });\r\n\r\n    return form;\r\n  };\r\n\r\n\r\n  /**\r\n   * Retrieves the structured values object generated from the values\r\n   * entered by the user and the data schema that gave birth to the form.\r\n   *\r\n   * Defined as a jQuery function that typically needs to be applied to\r\n   * a <form> element whose content has previously been generated by a\r\n   * call to \"jsonForm\".\r\n   *\r\n   * Unless explicitly disabled, the values are automatically validated\r\n   * against the constraints expressed in the schema.\r\n   *\r\n   * @function\r\n   * @return {Object} Structured values object that matches the user inputs\r\n   *  and the data schema.\r\n   */\r\n  $.fn.jsonFormValue = function() {\r\n    return getFormValue(this);\r\n  };\r\n\r\n});\r\n"]}