{"version":3,"sources":["get-initial-value.js"],"names":["define","langx","jsonform","util","getInitialValue","formObject","key","arrayPath","tpldata","usePreviousValues","value","idx","length","isSet","getValue","getFormElement","elements","formElement","each","elt","isString","items","form","schemaElement","getSchemaKey","schema","properties","getObjKey","applyArrayPath","indexOf","replace","template","valueTemplateSettings","hasOwnProperty","titleMap","_","maxLength","substr"],"mappings":";;;;;;;AAAAA,QACE,gBACA,aACA,UACA,SAASC,EAAMC,EAASC,GAiCxB,IAAIC,EAAkB,SAAUC,EAAYC,EAAKC,EAAWC,EAASC,GACnE,IAAIC,EAAQ,MAGZF,EAAUA,OACFG,IAAMH,EAAQG,MACnBJ,EAAYA,EAAUA,EAAUK,OAAO,GAAK,GAC/CJ,EAAQE,MAAQP,EAAKU,MAAML,EAAQE,OAASF,EAAQE,MAAQ,GAC5DF,EAAQM,SAAWN,EAAQM,UAAY,SAAUR,GAC/C,OAAOF,EAAgBC,EAAYC,EAAKC,EAAWC,EAASC,IAK9D,IAAIM,EAAiB,SAAUC,EAAUV,GACvC,IAAIW,EAAc,KAClB,OAAKD,GAAaA,EAASJ,QAC3BT,EAAKe,KAAKF,EAAU,SAAUG,GACxBF,IACAE,IAAQb,EAIRL,EAAMmB,SAASD,KACfA,EAAIb,MAAQA,EACdW,EAAcE,EAEPA,EAAIE,QACXJ,EAAcF,EAAeI,EAAIE,MAAOf,KARxCW,GAAgBX,IAAKa,MAWlBF,GAfmC,MAiBxCA,EAAcF,EAAeV,EAAWiB,SAAYhB,GACpDiB,EAAgBpB,EAAKqB,aAAanB,EAAWoB,OAAOC,WAAYpB,GAiDpE,OA/CIG,GAAqBJ,EAAWK,QAElCA,EAAQP,EAAKwB,UAAUtB,EAAWK,MAAOP,EAAKyB,eAAetB,EAAKC,KAE/DJ,EAAKU,MAAMH,KACVO,QAAgD,IAAzBA,EAAmB,MAI5CP,EAAQO,EAAmB,MAEpBM,GAEHpB,EAAKU,MAAMU,EAAuB,WACpCb,EAAQa,EAAuB,SAG/Bb,IAAyC,IAAhCA,EAAMmB,QAAQ,eAMzBnB,EAAQA,EAAMoB,QACZ,4BACA,uBAEApB,IACFA,EAAQT,EAAM8B,SAASrB,EAAOsB,sBAAtB/B,CAA6CO,KAMrDK,MAAMH,IAAUO,GAAed,EAAK8B,eAAehB,EAAYiB,SAAUxB,KAC3EA,EAAQT,EAAM8B,SAASd,EAAYiB,SAASxB,GAAQsB,sBAA5C/B,CAAmEO,IAIzEE,GAASyB,EAAEf,SAASV,IACtBa,GAAiBA,EAAca,WAC3B1B,EAAME,OAASW,EAAca,YAE/B1B,EAAQA,EAAM2B,OAAO,EAAGd,EAAca,UAAY,GAAK,KAItDjC,EAAKU,MAAMH,GAIPA,EAHA,MAOX,OAAOR,EAASE,gBAAkBA","file":"../get-initial-value.js","sourcesContent":["define([\r\n  \"skylark-langx\",\r\n  \"./jsonform\",\r\n  \"./util\"\r\n],function(langx,jsonform,util){\r\n  //1758-1881\r\n  /**\r\n   * Returns the initial value that a field identified by its key\r\n   * should take.\r\n   *\r\n   * The \"initial\" value is defined as:\r\n   * 1. the previously submitted value if already submitted\r\n   * 2. the default value defined in the layout of the form\r\n   * 3. the default value defined in the schema\r\n   *\r\n   * The \"value\" returned is intended for rendering purpose,\r\n   * meaning that, for fields that define a titleMap property,\r\n   * the function returns the label, and not the intrinsic value.\r\n   *\r\n   * The function handles values that contains template strings,\r\n   * e.g. {{values.foo[].bar}} or {{idx}}.\r\n   *\r\n   * When the form is a string, the function truncates the resulting string\r\n   * to meet a potential \"maxLength\" constraint defined in the schema, using\r\n   * \"...\" to mark the truncation. Note it does not validate the resulting\r\n   * string against other constraints (e.g. minLength, pattern) as it would\r\n   * be hard to come up with an automated course of action to \"fix\" the value.\r\n   *\r\n   * @function\r\n   * @param {Object} formObject The JSON Form object\r\n   * @param {String} key The generic key path (e.g. foo[].bar.baz[])\r\n   * @param {Array(Number)} arrayPath The array path that identifies\r\n   *  the unique value in the submitted form (e.g. [1, 3])\r\n   * @param {Object} tpldata Template data object\r\n   * @param {Boolean} usePreviousValues true to use previously submitted values\r\n   *  if defined.\r\n   */\r\n  var getInitialValue = function (formObject, key, arrayPath, tpldata, usePreviousValues) {\r\n    var value = null;\r\n\r\n    // Complete template data for template function\r\n    tpldata = tpldata || {};\r\n    tpldata.idx = tpldata.idx ||\r\n      (arrayPath ? arrayPath[arrayPath.length-1] : 1);\r\n    tpldata.value = util.isSet(tpldata.value) ? tpldata.value : '';\r\n    tpldata.getValue = tpldata.getValue || function (key) {\r\n      return getInitialValue(formObject, key, arrayPath, tpldata, usePreviousValues);\r\n    };\r\n\r\n    // Helper function that returns the form element that explicitly\r\n    // references the given key in the schema.\r\n    var getFormElement = function (elements, key) {\r\n      var formElement = null;\r\n      if (!elements || !elements.length) return null;\r\n      util.each(elements, function (elt) {\r\n        if (formElement) return;\r\n        if (elt === key) {\r\n          formElement = { key: elt };\r\n          return;\r\n        }\r\n        if (langx.isString(elt)) return;\r\n        if (elt.key === key) {\r\n          formElement = elt;\r\n        }\r\n        else if (elt.items) {\r\n          formElement = getFormElement(elt.items, key);\r\n        }\r\n      });\r\n      return formElement;\r\n    };\r\n    var formElement = getFormElement(formObject.form || [], key);\r\n    var schemaElement = util.getSchemaKey(formObject.schema.properties, key);\r\n\r\n    if (usePreviousValues && formObject.value) {\r\n      // If values were previously submitted, use them directly if defined\r\n      value = util.getObjKey(formObject.value, util.applyArrayPath(key, arrayPath));\r\n    }\r\n    if (!util.isSet(value)) {\r\n      if (formElement && (typeof formElement['value'] !== 'undefined')) {\r\n        // Extract the definition of the form field associated with\r\n        // the key as it may override the schema's default value\r\n        // (note a \"null\" value overrides a schema default value as well)\r\n        value = formElement['value'];\r\n      }\r\n      else if (schemaElement) {\r\n        // Simply extract the default value from the schema\r\n        if (util.isSet(schemaElement['default'])) {\r\n          value = schemaElement['default'];\r\n        }\r\n      }\r\n      if (value && value.indexOf('{{values.') !== -1) {\r\n        // This label wants to use the value of another input field.\r\n        // Convert that construct into {{getValue(key)}} for\r\n        // Underscore to call the appropriate function of formData\r\n        // when template gets called (note calling a function is not\r\n        // exactly Mustache-friendly but is supported by Underscore).\r\n        value = value.replace(\r\n          /\\{\\{values\\.([^\\}]+)\\}\\}/g,\r\n          '{{getValue(\"$1\")}}');\r\n      }\r\n      if (value) {\r\n        value = langx.template(value, valueTemplateSettings)(tpldata);\r\n      }\r\n    }\r\n\r\n    // TODO: handle on the formElement.options, because user can setup it too.\r\n    // Apply titleMap if needed\r\n    if (isSet(value) && formElement && util.hasOwnProperty(formElement.titleMap, value)) {\r\n      value = langx.template(formElement.titleMap[value], valueTemplateSettings)(tpldata);\r\n    }\r\n\r\n    // Check maximum length of a string\r\n    if (value && _.isString(value) &&\r\n      schemaElement && schemaElement.maxLength) {\r\n      if (value.length > schemaElement.maxLength) {\r\n        // Truncate value to maximum length, adding continuation dots\r\n        value = value.substr(0, schemaElement.maxLength - 1) + 'â€¦';\r\n      }\r\n    }\r\n\r\n    if (!util.isSet(value)) {\r\n      return null;\r\n    }\r\n    else {\r\n      return value;\r\n    }\r\n  };\r\n\r\n  return jsonform.getInitialValue = getInitialValue;\r\n\r\n});\r\n"]}