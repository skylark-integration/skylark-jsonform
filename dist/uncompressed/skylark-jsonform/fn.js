define([
  "skylark-langx",
  "skylark-jquery",
  "./form-tree",
  "./get-form-value"
],function(langx,$,formTree,getFormValue) {


  /**
   * Initializes tabular sections in forms. Such sections are generated by the
   * 'selectfieldset' type of elements in JSON Form.
   *
   * Input fields that are not visible are automatically disabled
   * not to appear in the submitted form. That's on purpose, as tabs
   * are meant to convey an alternative (and not a sequence of steps).
   *
   * The tabs menu is not rendered as tabs but rather as a select field because
   * it's easier to grasp that it's an alternative.
   *
   * Code based on bootstrap-tabs.js, updated to:
   * - react to option selection instead of tab click
   * - disable input fields in non visible tabs
   * - disable the possibility to have dropdown menus (no meaning here)
   * - act as a regular function instead of as a jQuery plug-in.
   *
   * @function
   * @param {Object} tabs jQuery object that contains the tabular sections
   *  to initialize. The object may reference more than one element.
   */
  var initializeTabs = function (tabs) {
    var activate = function (element, container) {
      container
        .find('> .active')
        .removeClass('active');
      element.addClass('active');
    };

    var enableFields = function ($target, targetIndex) {
      // Enable all fields in the targeted tab
      $target.find('input, textarea, select').removeAttr('disabled');

      // Disable all fields in other tabs
      $target.parent()
        .children(':not([data-idx=' + targetIndex + '])')
        .find('input, textarea, select')
        .attr('disabled', 'disabled');
    };

    var optionSelected = function (e) {
      var $option = $("option:selected", $(this)),
        $select = $(this),
        // do not use .attr() as it sometimes unexplicably fails
        targetIdx = $option.get(0).getAttribute('data-idx') || $option.attr('value'),
        $target;

      e.preventDefault();
      if ($option.hasClass('active')) {
        return;
      }

      $target = $(this).parents('.tabbable').eq(0).find('> .tab-content > [data-idx=' + targetIdx + ']');

      activate($option, $select);
      activate($target, $target.parent());
      enableFields($target, targetIdx);
    };

    var tabClicked = function (e) {
      var $a = $('a', $(this));
      var $content = $(this).parents('.tabbable').first()
        .find('.tab-content').first();
      var targetIdx = $(this).index();
      // The `>` here is to prevent activating selectfieldsets inside a tabarray
      var $target = $content.find('> [data-idx=' + targetIdx + ']');

      e.preventDefault();
      activate($(this), $(this).parent());
      activate($target, $target.parent());
      if ($(this).parent().hasClass('jsonform-alternative')) {
        enableFields($target, targetIdx);
      }
    };

    tabs.each(function () {
      $(this).delegate('select.nav', 'change', optionSelected);
      $(this).find('select.nav').each(function () {
        $(this).val($(this).find('.active').attr('value'));
        // do not use .attr() as it sometimes unexplicably fails
        var targetIdx = $(this).find('option:selected').get(0).getAttribute('data-idx') ||
          $(this).find('option:selected').attr('value');
        var $target = $(this).parents('.tabbable').eq(0).find('> .tab-content > [data-idx=' + targetIdx + ']');
        enableFields($target, targetIdx);
      });

      $(this).delegate('ul.nav li', 'click', tabClicked);
      $(this).find('ul.nav li.active').click();
    });
  };

  //3670-3809

  /**
   * Highlights errors reported by the JSON schema validator in the document.
   *
   * @function
   * @param {Object} errors List of errors reported by the JSON schema validator
   * @param {Object} options The JSON Form object that describes the form
   *  (unused for the time being, could be useful to store example values or
   *   specific error messages)
   */
  $.fn.jsonFormErrors = function(errors, options) {
    $(".error", this).removeClass("error");
    $(".warning", this).removeClass("warning");

    $(".jsonform-errortext", this).hide();
    if (!errors) return;

    var errorSelectors = [];
    for (var i = 0; i < errors.length; i++) {
      // Compute the address of the input field in the form from the URI
      // returned by the JSON schema validator.
      // These URIs typically look like:
      //  urn:uuid:cccc265e-ffdd-4e40-8c97-977f7a512853#/pictures/1/thumbnail
      // What we need from that is the path in the value object:
      //  pictures[1].thumbnail
      // ... and the jQuery-friendly class selector of the input field:
      //  .jsonform-error-pictures\[1\]---thumbnail
      var key = errors[i].uri
        .replace(/.*#\//, '')
        .replace(/\//g, '.')
        .replace(/\.([0-9]+)(?=\.|$)/g, '[$1]');
      var errormarkerclass = ".jsonform-error-" +
        util.escapeSelector(key.replace(/\./g,"---"));
      errorSelectors.push(errormarkerclass);

      var errorType = errors[i].type || "error";
      $(errormarkerclass, this).addClass(errorType);
      $(errormarkerclass + " .jsonform-errortext", this).html(errors[i].message).show();
    }

    // Look for the first error in the DOM and ensure the element
    // is visible so that the user understands that something went wrong
    errorSelectors = errorSelectors.join(',');
    var firstError = $(errorSelectors).get(0);
    if (firstError && firstError.scrollIntoView) {
      firstError.scrollIntoView(true, {
        behavior: 'smooth'
      });
    }
  };


  /**
   * Generates the HTML form from the given JSON Form object and renders the form.
   *
   * Main entry point of the library. Defined as a jQuery function that typically
   * needs to be applied to a <form> element in the document.
   *
   * The function handles the following properties for the JSON Form object it
   * receives as parameter:
   * - schema (required): The JSON Schema that describes the form to render
   * - form: The options form layout description, overrides default layout
   * - prefix: String to use to prefix computed IDs. Default is an empty string.
   *  Use this option if JSON Form is used multiple times in an application with
   *  schemas that have overlapping parameter names to avoid running into multiple
   *  IDs issues. Default value is "jsonform-[counter]".
   * - transloadit: Transloadit parameters when transloadit is used
   * - validate: Validates form against schema upon submission. Uses the value
   * of the "validate" property as validator if it is an object.
   * - displayErrors: Function to call with errors upon form submission.
   *  Default is to render the errors next to the input fields.
   * - submitEvent: Name of the form submission event to bind to.
   *  Default is "submit". Set this option to false to avoid event binding.
   * - onSubmit: Callback function to call when form is submitted
   * - onSubmitValid: Callback function to call when form is submitted without
   *  errors.
   *
   * @function
   * @param {Object} options The JSON Form object to use as basis for the form
   */
  $.fn.jsonForm = function(options) {
    var formElt = this;

    options = langx.defaults({}, options, {submitEvent: 'submit'});

    var form = new formTree();
    form.initialize(options);
    form.render(formElt.get(0));

    // TODO: move that to formTree.render
    if (options.transloadit) {
      formElt.append('<input type="hidden" name="params" value=\'' +
        langx.escapeHTML(JSON.stringify(options.transloadit.params)) +
        '\'>');
    }

    // Keep a direct pointer to the JSON schema for form submission purpose
    formElt.data("jsonform-tree", form);

    if (options.submitEvent) {
      formElt.unbind((options.submitEvent)+'.jsonform');
      formElt.bind((options.submitEvent)+'.jsonform', function(evt) {
        form.submit(evt);
      });
    }

    // Initialize tabs sections, if any
    initializeTabs(formElt);

    // Initialize expandable sections, if any
    $('.expandable > div, .expandable > fieldset', formElt).hide();
    formElt.on('click', '.expandable > legend', function () {
      var parent = $(this).parent();
      parent.toggleClass('expanded');
      parent.find('legend').attr("aria-expanded", parent.hasClass("expanded"))
      $('> div', parent).slideToggle(100);
    });

    return form;
  };


  /**
   * Retrieves the structured values object generated from the values
   * entered by the user and the data schema that gave birth to the form.
   *
   * Defined as a jQuery function that typically needs to be applied to
   * a <form> element whose content has previously been generated by a
   * call to "jsonForm".
   *
   * Unless explicitly disabled, the values are automatically validated
   * against the constraints expressed in the schema.
   *
   * @function
   * @return {Object} Structured values object that matches the user inputs
   *  and the data schema.
   */
  $.fn.jsonFormValue = function() {
    return getFormValue(this);
  };

});
